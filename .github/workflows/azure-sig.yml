name: Kubernetes SIG build for Azure
run-name: Kubernetes v${{ inputs.kubernetesVersion }} ${{ inputs.os }} ${{ inputs.osVersion }} SIG build for Azure

permissions:
  contents: read

on:
  workflow_dispatch:
    inputs:
      kubernetesVersion:
        description: 'Kubernetes version'
        required: true
        default: '1.29.1'
        type: string
      os:
        description: 'OS'
        required: true
        default: 'ubuntu'
        type: choice
        options:
          - flatcar
          - mariner
          - rhel
          - ubuntu
          - windows
      osVersion:
        description: 'OS version'
        required: true
        default: '22.04 or 2022-containerd (for example)'
        type: string

jobs:
  build-azure-sig:
    runs-on: ubuntu-latest
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@63c24ba6bd7ba022e95695ff85de572c04a18142 # v2.7.0
        with:
          egress-policy: audit

      - name: Check for Windows kube-proxy images
        if: inputs.os == 'windows'
        run: |
          set -euo pipefail
          kube_proxy_url="sigwindowstools/kube-proxy:v${KUBERNETES_VERSION}-calico-hostprocess"
          echo "Checking for Windows kube-proxy image $kube_proxy_url"
          if ! stderr="$(docker pull $kube_proxy_url 2>&1 > /dev/null)"; then
            # It's a Windows image, so expect an error after pulling it on Linux
            if [[ $stderr != *"cannot be used on this platform"* ]]; then
              echo "Failed to pull kube-proxy image: $stderr"
              exit 1
            fi
          fi
        env:
          KUBERNETES_VERSION: ${{ inputs.kubernetesVersion }}

      - name: Check out the code
        uses: actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29 # v4.1.6

      - name: Write build configuration
        run: |
          set -euo pipefail
          CONFIG_FILE=images/capi/packer/config/kubernetes.json
          KUBERNETES_RELEASE=$(echo ${KUBERNETES_VERSION} | cut -d "." -f -2)
          sed -i "s/^  \"kubernetes_series\".*/  \"kubernetes_series\": \"v${KUBERNETES_RELEASE}\",/g" ${CONFIG_FILE}
          sed -i "s/^  \"kubernetes_semver\".*/  \"kubernetes_semver\": \"v${KUBERNETES_VERSION}\",/g" ${CONFIG_FILE}
          sed -i "s/^  \"kubernetes_rpm_version\".*/  \"kubernetes_rpm_version\": \"${KUBERNETES_VERSION}\",/g" ${CONFIG_FILE}
          sed -i "s/^  \"kubernetes_deb_version\".*/  \"kubernetes_deb_version\": \"${KUBERNETES_VERSION}-1.1\",/g" ${CONFIG_FILE}
          cat ${CONFIG_FILE}
        env:
          KUBERNETES_VERSION: ${{ inputs.kubernetesVersion }}

      - name: Build image in Azure SIG
        run: |
          set -euo pipefail
          make -C images/capi deps-azure
          if [[ "${OS}" == "windows" ]]; then
            # Install pywinrm for GitHub Actions environment
            pipx inject ansible-core pywinrm
          fi
          # Strip the dots from the osVersion for the Makefile target, e.g. 22.04 -> 2204
          VERSION=$(echo ${OS_VERSION} | tr -d .)
          make -C images/capi build-azure-sig-${OS}-${VERSION}
        env:
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          OS: ${{ inputs.os }}
          OS_VERSION: ${{ inputs.osVersion }}
